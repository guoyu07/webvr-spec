{"name":"Webvr-spec","tagline":"WebVR Specification","body":"<h1>WebVR</h1>\r\n\r\n<pre class='metadata'>\r\nStatus: ED\r\nED: https://github.com/MozVR/webvr-spec/blob/master/webvr.html\r\nShortname: webvr\r\nLevel: 1\r\nEditor: Vladimir Vukicevic, Mozilla http://mozilla.com/, vladimir@mozilla.com\r\nEditor: Brandon Jones, Google http://google.com/, bajones@google.com\r\nAbstract: This specification describes support for accessing virtual reality devices, including sensors and head-mounted displays on the Web.\r\nMailing List: web-vr-discuss@mozilla.org\r\nMailing List Archives: https://mail.mozilla.org/pipermail/web-vr-discuss/\r\n\r\n</pre>\r\n\r\n# 简介 # {#intro}\r\n\r\n硬件使得那些需要高精度、低延时界面效果的虚拟现实应用能提供令人满意的体验。其他接口如设备定位事件传感器虽然可以被应用到VR场景的输入，但削弱了这种接口的原始用途，且经常满足不了对高质量VR效果的精度需求。\r\n\r\nWebVR的API给VR硬件定义了专门定制的接口，让开发者构建出沉浸感强、舒适度高的VR体验。\r\n\r\n# 支持的设备类型 # {#devtypes}\r\n\r\n目前定义了两种VR设备体(Variant)，每种设备体仅描述一款硬件其中某一种特定功能，而不是该硬件所有功能。例如，Oculus Rift这样典型的头盔式显示器将被对外定义成两个VR设备：\r\n\r\nHMDVRDevice：描述了该设备的光学属性，包括：视角、瞳距；\r\nPositionSensorVRDevice：描述了该HMD设备在空间上的方位；\r\n\r\nPositionSensorVRDevice可以不提供HMDVRDevice相关的功能，比如仅仅是一个六自由度控制器可以跟踪方位即可。\r\n\r\n更多的VRDevice类型会随着消费者不断接触到的新硬件类型或新功能逐渐增加，比如眼动跟踪仪就很可能是将来的一种接口设备。\r\n\r\n# 安全性 # {#security}\r\n\r\n关于安全问题的信息会放到这段。\r\n\r\n# DOM 接口 # {#dom}\r\n\r\n要支持在运行时访问上述功能，需向HTML DOM中添加相应接口或功能的代码，该小节对其做了描述。\r\n\r\n## VREye\r\n\r\n<pre class=\"idl\">\r\nenum VREye { \"left\", \"right\" };\r\n</pre>\r\n\r\n## VRFieldOfView\r\n\r\n {{VRFieldOfView}} 接口代表人眼的视角，给出了 从中心点描述场景视图的四个角度。\r\n\r\n<pre class=\"idl\">\r\ninterface VRFieldOfViewReadOnly {\r\n  readonly attribute double upDegrees;\r\n  readonly attribute double rightDegrees;\r\n  readonly attribute double downDegrees;\r\n  readonly attribute double leftDegrees;\r\n};\r\n\r\ndictionary VRFieldOfViewInit {\r\n  double upDegrees = 0.0;\r\n  double rightDegrees = 0.0;\r\n  double downDegrees = 0.0;\r\n  double leftDegrees = 0.0;\r\n};\r\n\r\n[Constructor(optional VRFieldOfViewInit fov),\r\n Constructor(double upDegrees, double rightDegrees, double downDegrees, double leftDegrees)]\r\ninterface VRFieldOfView : VRFieldOfViewReadOnly {\r\n  inherit attribute double upDegrees;\r\n  inherit attribute double rightDegrees;\r\n  inherit attribute double downDegrees;\r\n  inherit attribute double leftDegrees;\r\n};\r\n</pre>\r\n\r\n<div class=\"example\">\r\n以下js代码片段创建了一个兼容WebGL代码的{{VRFieldOfView}}投影矩阵。\r\n\r\n<pre>\r\nfunction fieldOfViewToProjectionMatrix(fov, zNear, zFar) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  var out = new Float32Array(16);\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = ((upTan - downTan) * yScale * 0.5);\r\n  out[10] = -(zNear + zFar) / (zFar - zNear);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = -(2.0 * zFar * zNear) / (zFar - zNear);\r\n  out[15] = 0.0;\r\n\r\n  return out;\r\n}\r\n</pre>\r\n</div>\r\n\r\n## VRPositionState\r\n\r\n{{VRPositionState}} 接口代表传感器在给定时间戳的状况。\r\n\r\n<pre class=\"idl\">\r\ninterface VRPositionState {\r\n  readonly attribute double timeStamp;\r\n\r\n  readonly attribute boolean hasPosition;\r\n  readonly attribute DOMPoint? position;\r\n  readonly attribute DOMPoint? linearVelocity;\r\n  readonly attribute DOMPoint? linearAcceleration;\r\n\r\n  readonly attribute boolean hasOrientation;\r\n  // XXX should be DOMQuaternion as soon as we add that\r\n  readonly attribute DOMPoint? orientation;\r\n  readonly attribute DOMPoint? angularVelocity;\r\n  readonly attribute DOMPoint? angularAcceleration;\r\n};\r\n</pre>\r\n\r\n### 属性 ### {#vrpositionstateattributes}\r\n\r\n<dfn attribute for=VRPositionState>timeStamp</dfn>\r\n值的单向增加让开发者可以判断设备的位置状态数据是否更新。既然值是单向增加的，就可以对他们进行比较来判断更新的顺序，因为新的值肯定大于等于旧的值。\r\n\r\n<dfn attribute for=VRPositionState>hasPosition</dfn>\r\n为True代表{{position}}可用；为False属性则{{position}}必须为null。\r\n\r\n<dfn attribute for=VRPositionState>position</dfn>\r\n代表在指定{{timeStamp}}下传感器的位置，是一个三维坐标。位置是相对原点的距离。原点是怎么来的呢？就是初次读取的传感器位置或者通过调用resetSensor重置传感器时的传感器位置。坐标轴系统定义：\r\n<ul>\r\n <li>X轴正向在向用户右边</li>\r\n <li>Y轴正向是向上</li>\r\n <li>Z正向是向用户身后</li>\r\n</ul>\r\nAll positions are given relative to the identity orientation. The w component\r\nMUST be 0. 如果传感器无法提供位置数据，就为null。\r\n\r\n<dfn attribute for=VRPositionState>linearVelocity</dfn>\r\n在{{timeStamp}}时的线速度。w组件必须为0。如果传感器无法提供位置数据，就为null。\r\n\r\n<dfn attribute for=VRPositionState>linearAcceleration</dfn>\r\n在{{timeStamp}}时的线性加速度。w组件必须为0。如果传感器无法提供位置数据，就为null。\r\n\r\n<dfn attribute for=VRPositionState>hasOrientation</dfn>\r\n如果{{orientation}}属性可用，则值为true；如果{{orientation}}为null，则值为false。\r\n\r\n<dfn attribute for=VRPositionState>orientation</dfn>\r\n在给定的{{timeStamp}}传感器的方位，为四元数。方位偏向（沿Y轴的转角）是相对于传感器的初始偏向的，即初次读取或执行resetSensor时的值。\r\n方位值{x: 0, y: 0, z: 0, w: 1}一般代表“向前”。\r\n如果传感器不能提供方位数据，则返回null。\r\n\r\n<dfn attribute for=VRPositionState>angularVelocity</dfn>\r\n给定{{timeStamp}}时传感器的角速度。w组件值必须为0。如果传感器不能提供角速度，则返回null。\r\n\r\n<dfn attribute for=VRPositionState>angularAcceleration</dfn>\r\n给定{{timeStamp}}时传感器的角加速度。w组件值必须为0。如果传感器不能提供加角速度，则返回null。\r\n\r\n## VREyeParameters\r\n\r\n {{VREyeParameters}} 接口代表向每只眼正确渲染场景所必须的信息。\r\n\r\n<pre class=\"idl\">\r\ninterface VREyeParameters {\r\n  /* These values are expected to be static per-device/per-user. */\r\n  readonly attribute VRFieldOfView minimumFieldOfView;\r\n  readonly attribute VRFieldOfView maximumFieldOfView;\r\n  readonly attribute VRFieldOfView recommendedFieldOfView;\r\n  readonly attribute DOMPoint eyeTranslation;\r\n\r\n  /* These values will vary after a FOV has been set. */\r\n  readonly attribute VRFieldOfView currentFieldOfView;\r\n  readonly attribute DOMRect renderRect;\r\n};\r\n</pre>\r\n\r\n### 属性 ### {#vreyeparametersattributes}\r\n\r\n<dfn attribute for=VREyeParameters>minimumFieldOfView</dfn>\r\n描述眼睛支持的最低视角。\r\n\r\n<dfn attribute for=VREyeParameters>maximumFieldOfView</dfn>\r\n描述眼睛支持的最大视角。\r\n\r\n<dfn attribute for=VREyeParameters>recommendedFieldOfView</dfn>\r\n描述眼睛推荐的视角。推荐设置成基于用户校准的值。\r\n\r\n<dfn attribute for=VREyeParameters>eyeTranslation</dfn>\r\n用户头部正中心到眼睛之间的距离，以米为单位。这个值应该就是代表该用户的瞳距(IPD)，但也可以代表头盔中心点到眼球中心点的距离。左眼的值必须是负值，右眼的值必须是正值。\r\n\r\n<dfn attribute for=VREyeParameters>currentFieldOfView</dfn>\r\n当前眼睛的视角，就是setFieldOfView设置的值。默认为 {{recommendedFieldOfView}} 。\r\n\r\n<dfn attribute for=VREyeParameters>renderRect</dfn>\r\n描述在画布上渲染给眼睛的可视化内容的视口(viewport)。 左眼和右眼的{{renderRect}}必须不能有交叉, {{renderRect}}中右眼必须是左眼右边的内容。\r\n{{renderRect}}两只眼球合起来应该是描述了HMD在采用{{currentFieldOfView}}时的最佳渲染精度，这样才能用户中心的视角维持在1:1的像素比例。\r\n\r\n<div class=\"example\">\r\n很多HMD设备会将渲染的图像进行变形处理，来抵消由头盔光学元件带来的不适效果。\r\n画布的光学分辨率经常会比HMD的物理分辨率大，来确保用户看到的最终图像效果是以1:1的比例显示在用户视角中心。 \r\n光学画布分辨率可以通过以下方式来计算：\r\n\r\n<pre>\r\nvar leftEyeParams = hmd.getEyeParameters(\"left\");\r\nvar rightEyeParams = hmd.getEyeParameters(\"right\");\r\nvar leftEyeRect = leftEyeParams.renderRect;\r\nvar rightEyeRect = rightEyeParams.renderRect;\r\n\r\ncanvas.width = rightEyeRect.x + rightEyeRect.width;\r\ncanvas.height = Math.max(leftEyeRect.y + leftEyeRect.height,\r\n                         rightEyeRect.y + rightEyeRect.height);\r\n</pre>\r\n</div>\r\n\r\n## VRDevice\r\n\r\n{{VRDevice}}接口构成了支持该API的所有VR设备的基础。它包含了如设备ID和描述等一般信息。\r\n\r\n<pre class=\"idl\">\r\ninterface VRDevice {\r\n  readonly attribute DOMString hardwareUnitId;\r\n  readonly attribute DOMString deviceId;\r\n  readonly attribute DOMString deviceName;\r\n};\r\n</pre>\r\n\r\n### 属性 ### {#vrdeviceattributes}\r\n\r\n<dfn attribute for=VRDevice>hardwareUnitId</dfn>\r\n各硬件单元的区分标识符，同一款物理硬件中的所有{{VRDevice}}拥有同一个{{hardwareUnitId}}值。\r\n\r\n<dfn attribute for=VRDevice>deviceId</dfn>\r\n区别于物理硬件设备的传感器设备的标识。这个值不会随着浏览器重启而发生变化，可用于关联保存配置数据。\r\n\r\n<dfn attribute for=VRDevice>deviceName</dfn>\r\n用户可读取的标识该设备的名称。\r\n\r\n## HMDVRDevice\r\n\r\n{{HMDVRDevice}}接口代表头盔显示器 {{VRDevice}}。它包含了该HMD的配置和其它信息。\r\n\r\n<pre class=\"idl\">\r\ninterface HMDVRDevice : VRDevice {\r\n  VREyeParameters getEyeParameters(VREye whichEye);\r\n  void setFieldOfView(optional VRFieldOfViewInit leftFOV,\r\n                      optional VRFieldOfViewInit rightFOV,\r\n                      optional double zNear = 0.01,\r\n                      optional double zFar = 10000.0);\r\n};\r\n</pre>\r\n\r\n### 方法 ### {#hmdvrdevicemethods}\r\n\r\n<dfn method for=HMDVRDevice>getEyeParameters(VREye whichEye)</dfn>\r\n返回给定眼睛当前的{{VREyeParameters}}.\r\n\r\n<dfn method for=HMDVRDevice>setFieldOfView(optional VRFieldOfViewInit leftFOV, optional VRFieldOfViewInit rightFOV, optional double zNear = 0.01, optional double zFar = 10000.0)</dfn>\r\n设置两只眼睛的视角。如果都为null，或者都为0，就会启用{{recommendedFieldOfView}}所设置的值。\r\n如果视角的值超出同一只眼{{minimumFieldOfView}} 或 {{maximumFieldOfView}}的范围，就会自动剪裁到有效范围内。\r\n\r\n## PositionSensorVRDevice\r\n\r\n{{PositionSensorVRDevice}}接口代表传感器{{VRDevice}}能实时报告方位数据(位置、方向可选)。\r\n\r\n<pre class=\"idl\">\r\ninterface PositionSensorVRDevice : VRDevice {\r\n  VRPositionState getState();\r\n  VRPositionState getImmediateState();\r\n  void resetSensor();\r\n};\r\n</pre>\r\n\r\n### 方法 ### {#positionsensorvrdevicemethods}\r\n\r\n<dfn method for=HMDVRDevice>getState()</dfn>\r\n返回 {{VRPositionState}}的数据词典，包含当前帧(如果在requestAnimationFrame环境中)或前一帧的传感器位置状态。这个状态可以基于帧执行排期的实现机制进行预测。\r\n\r\nVRPositionState会包含位置、方向、角度及这些值的加速度值。\r\n可以用{{hasPosition}}和{{hasOrientation}}两个方法来检测相关成员属性是否可用；如果不可用，这些成员属性值必须为null。\r\n\r\n<dfn method for=HMDVRDevice>getImmediateState()</dfn>\r\n返回传感器当前瞬时状态。\r\n\r\n<dfn method for=HMDVRDevice>resetSensor()</dfn>\r\n重置传感器，把它当前的位置和方向朝向作为设备的原点值。\r\n\r\n## 导航器接口扩展\r\n\r\n<pre class=\"idl\">\r\npartial interface Navigator {\r\n  Promise&lt;sequence&lt;VRDevice&gt&gt; getVRDevices();\r\n};\r\n</pre>\r\n\r\n### 方法 ### {#navigatormethods}\r\n\r\n<dfn method for=Navigator>getVRDevices()</dfn>\r\n返回Promise，包含确定可用的{{VRDevice}}列表。应用程序应该遍历该列表，并根据{{hardwareUnitId}}访问设备所有能力。\r\n\r\n<div class=\"example\">\r\n以下代码代表找出可用的第一款 {{HMDVRDevice}} 以及它相关联的 {{PositionSensorVRDevice}}（如果有的话）。\r\n\r\n<pre>\r\nvar gHMD, gPositionSensor;\r\n\r\nnavigator.getVRDevices().then(function(devices) {\r\n  for (var i = 0; i < devices.length; ++i) {\r\n    if (devices[i] instanceof HMDVRDevice) {\r\n      gHMD = devices[i];\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (gHMD) {\r\n    for (var i = 0; i < devices.length; ++i) {\r\n      if (devices[i] instanceof PositionSensorVRDevice &&\r\n          devices[i].hardwareUnitId == gHMD.hardwareUnitId)) {\r\n        gPositionSensor = devices[i];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n});\r\n</pre>\r\n</div>\r\n\r\n# 致谢 # {#ack}\r\n\r\n中文翻译：赵自明 <web3d@live.com>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}